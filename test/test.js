import * as t from "https://deno.land/std/testing/asserts.ts";
import { GIFEncoder } from "../GIFEncoder.js";
import { GIF } from "../GIF.js";

class ImageData {
  constructor(data, w, h) {
    this.data = data;
    this.width = w;
    this.height = h;
  }
}

const makePanel = (w, h, rgba) => {
  const d = new Uint8ClampedArray(w * h * 4);
  for (let i = 0; i < d.length; i += 4) {
    d[i] = rgba[0];
    d[i + 1] = rgba[1];
    d[i + 2] = rgba[2];
    d[i + 3] = rgba[3];
  }
  return new ImageData(d, w, h);
};

Deno.test("encode", async () => {
  const encoder = new GIFEncoder(320, 240);
  encoder.start();
  encoder.setRepeat(0); // 0 for repeat, -1 for no-repeat
  encoder.setDelay(500); // frame delay in ms
  encoder.setQuality(10); // image quality. 10 is default.

  const [w, h] = [320, 240];
  {
    // red rectangle
    const frame = makePanel(w, h, [0xff, 0, 0, 0xff]);
    encoder.addFrame(frame.data);
  }
  {
    // green rectangle
    const frame = makePanel(w, h, [0x0, 0xff, 0, 0xff]);
    encoder.addFrame(frame.data);
  }
  {
    // blue rectangle
    const frame = makePanel(w, h, [0x0, 0, 0xff, 0xff]);
    encoder.addFrame(frame.data);
  }
  encoder.finish();

  const buf = encoder.out.getData();
  const chk = await Deno.readFile("../examples/myanimated.gif");
  t.assertEquals(buf, chk);
});

Deno.test("GIF.js animatied", async () => {
  const [w, h] = [320, 240];
  const frames = [];
  frames.push(makePanel(w, h, [0xff, 0, 0, 0xff]));
  frames.push(makePanel(w, h, [0x0, 0xff, 0, 0xff]));
  frames.push(makePanel(w, h, [0x0, 0, 0xff, 0xff]));
  const buf = GIF.encode(frames, 500, 0);
  const chk = await Deno.readFile("../examples/myanimated.gif");
  t.assertEquals(buf, chk);
});

Deno.test("GIF.js single", async () => {
  const img = makePanel(1, 1, [0xff, 0, 0, 0xff]);
  const buf = GIF.encode(img);
  //console.log(JSON.stringify(Array.from(buf)));
  const chk = [71,73,70,56,57,97,1,0,1,0,247,0,0,255,0,0,254,0,0,254,0,0,252,0,0,251,0,0,248,0,0,246,0,0,243,0,0,239,0,0,235,0,0,231,0,0,226,1,1,220,1,1,215,2,2,208,2,2,202,3,3,195,4,4,187,4,4,180,5,5,171,6,6,163,7,7,154,9,9,144,10,10,135,11,11,125,13,13,114,15,15,103,17,17,92,19,19,81,21,21,69,23,23,57,26,26,44,29,29,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76,77,77,77,78,78,78,79,79,79,80,80,80,81,81,81,82,82,82,83,83,83,84,84,84,85,85,85,86,86,86,87,87,87,88,88,88,89,89,89,90,90,90,91,91,91,92,92,92,93,93,93,94,94,94,95,95,95,96,96,96,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,102,102,102,103,103,103,104,104,104,105,105,105,106,106,106,107,107,107,108,108,108,109,109,109,110,110,110,111,111,111,112,112,112,113,113,113,114,114,114,115,115,115,116,116,116,117,117,117,118,118,118,119,119,119,120,120,120,121,121,121,122,122,122,123,123,123,124,124,124,125,125,125,126,126,126,127,127,127,128,128,128,129,129,129,130,130,130,131,131,131,132,132,132,133,133,133,134,134,134,135,135,135,136,136,136,137,137,137,138,138,138,139,139,139,140,140,140,141,141,141,142,142,142,143,143,143,144,144,144,145,145,145,146,146,146,147,147,147,148,148,148,149,149,149,150,150,150,151,151,151,152,152,152,153,153,153,154,154,154,155,155,155,156,156,156,157,157,157,158,158,158,159,159,159,160,160,160,161,161,161,162,162,162,163,163,163,164,164,164,165,165,165,166,166,166,167,167,167,168,168,168,169,169,169,170,170,170,171,171,171,172,172,172,173,173,173,174,174,174,175,175,175,176,176,176,177,177,177,178,178,178,179,179,179,180,180,180,181,181,181,182,182,182,183,183,183,184,184,184,185,185,185,186,186,186,187,187,187,188,188,188,189,189,189,190,190,190,191,191,191,192,192,192,193,193,193,194,194,194,195,195,195,196,196,196,197,197,197,198,198,198,199,199,199,200,200,200,201,201,201,202,202,202,203,203,203,204,204,204,205,205,205,206,206,206,207,207,207,208,208,208,209,209,209,210,210,210,211,211,211,212,212,212,213,213,213,214,214,214,215,215,215,216,216,216,217,217,217,218,218,218,219,219,219,220,220,220,221,221,221,222,222,222,223,223,223,224,224,224,225,225,225,226,226,226,227,227,227,228,228,228,229,229,229,230,230,230,231,231,231,232,232,232,233,233,233,234,234,234,235,235,235,236,236,236,237,237,237,238,238,238,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,245,245,245,246,246,246,247,247,247,248,248,248,249,249,249,250,250,250,251,251,251,252,252,252,253,253,253,254,254,254,255,255,255,33,249,4,0,0,0,0,0,44,0,0,0,0,1,0,1,0,0,8,4,0,1,4,4,0,59];
  //await Deno.writeFile("test.gif", buf);
  t.assertEquals(chk ,buf);
});
